package com.TestAbstractClass;

/**
 * 抽象方法 
 * 使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。
 * 抽象类
 * 包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。
 * 
 * 抽象类的使用要点:
     1. 有抽象方法的类只能定义成抽象类
     2. 抽象类不能实例化，即不能用new来实例化抽象类。
     3. 抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。
     4. 抽象类只能用来被继承。
     5. 抽象方法必须被子类实现
 */
abstract class Animal {
	private String name;
	private int age;
	
	abstract public void shout();
	
	public void run() {
		System.out.println("拼命奔跑！");
	}
}

class Dog extends Animal{
	//子类必须实现父类的抽象方法，否则编译错误
	@Override
	public void shout() {
		// TODO Auto-generated method stub
		System.out.println("汪汪汪！");
	}
	
	public void seeDoor(){
        System.out.println("看门中....");
    }	
}

//测试抽象类
public class TestAbstractClass {
  public static void main(String[] args) {
      Animal a = new Dog();	//多态
      Dog d = (Dog) a;		//强制转换
      a.shout();
      d.seeDoor();
  }
}